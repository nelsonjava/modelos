MAVEN

* DEFINICION

  Maven es un framework de gestión de proyectos de software, que proporciona un modelo estándar de gestión y descripción de proyectos.

* REPOSITORIO

  El repositorio es un mecanismo espacial de Maven para organizar los ficheros Jar y otras dependencias que utilizan tus aplicaciones.
  (Maven también utiliza el término artefacto para referirse a las dependencias).

  En el repositorio encontramos los JAR, WAR, etc en una jerarquía de carpetas que siguen el mismo concepto: groupId, artifactId, version.

  El repositorio esencialmente es una estructura de directorios con una organiazación específica para Maven,

  El repositorio soluciona dos problemas:

  * <<Primero>>, proporciona una localización centralizada para todos los ficheros Jar y otras dependencias que necesita tu proceso de construcción.

  * <<Segundo>>, es un ayuda con los problemas de versiones proponiendo una convención de nombrado.


* {TIPOS DEL REPOSITORIO DE MAVEN:}

 Maven maneja 3 niveles de repositorio:

 * <<Local:>> El repositorio local normalmente conocido como .m2 se guarda localmente en nuestra pc

 * <<Empresarial:>> El repositorio Empresarial tiene la misma estructura que el repositorio local con la diferencia que almacena librerías de uso compartido a nivel de red. Los repositorios empresariales normalmente se utilizan cuando se maneja un equipo de desarrolladores que trabaja sobre un conjunto variado de proyectos, los cuales normalmente tienen interdependencia entre ellos y sus librerías.

 * <<Global:>> Los repositorios globales son repositorios públicos que almacenan librerías de uso compartido, como por ejemplo el repositorio mismo de Maven o el repositorio público de JBoss o maven central.


* {ESTRUCTURA DEL REPOSITORIO DE MAVEN:}

 <<Las coordenadas de Maven>> Es la forma de identificar a un projecto, dependencia, plugin o artefacto en forma única en un pom y en un repositorio.

 Una coordenada se compone de los siguientes identificadores: groupId:artefactId:version.

+-----+
  <USER_HOME>/repository/<groupId>/<artifactId>/<version>/<artifactId>-<version>.ext
  |-- Dir Repositorio --| Directorio de la dependencia --|-- nombre del archivo  --|
+-----+

 <<dependencias>>

+-----+
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>4.0.0.GA</version>
    <scope>provided</scope>
  </dependency>

  <dependency>
    <groupId>com.sun.faces</groupId>
    <artifactId>jsf-api</artifactId>
    <version>2.0.3-b05</version>
  </dependency>
+-----+

 <<Estructura de directorios>> donde se almacenan las dependencias: <USER_HOME>/.m2/repository/

+-----+

 |-- org
     |
     '-- hibernate
         |
         '-- hibernate-validator
             |
             '-- 4.0.0.GA
                 |
                 '-- hibernate-validator-4.0.0.GA.jar
 |-- com
     |
     '-- sun
         |
         '-- faces
             |
             '-- jsf-api
                 |
                 '-- 2.0.3-b05
                     |
                     '-- jsf-api-2.0.3-b05.jar

+-----+

* {DEPENDENCIAS:}

  Está es la sección más importante, la misión principal de gestionar las dependencias.
  Los únicos campos obligatorios son el id del grupo y el del artefacto.
  Si no especificamos la versión, descargará la última.
  El tipo por defecto será jar y el alcance (scope) será “compile”:

+-----+
  <dependency>
    <groupId>com.sun.faces</groupId>
    <artifactId>jsf-api</artifactId>
    <version>2.0.3-b05</version>
  </dependency>
+-----+

* {BUILD}

  Esta sección es también bastante importante, pues es donde se configura el build del proyecto mediante plugins.
  Maven tiene una arquitectura muy modular, está construido mediante plugins. Así, la misma compilación de un proyecto, es un plugin:

+-----+
<build>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<source>${java-version}</source>
				<target>${java-version}</target>
			</configuration>
		</plugin>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-war-plugin</artifactId>
			<configuration>
				<webappDirectory>src/main/webapp</webappDirectory>
				<warName>maven-sample</warName>
			</configuration>
		</plugin>
	</plugins>
</build>
+-----+


 * <<El primer plugin>>, es el {{{http://maven.apache.org/plugins/maven-compiler-plugin/}maven-compiler-plugin}}, que es el que se encarga de compilar.
 Aquí le decimos que versión de Java estamos usando, en este caso, la 1.6. Es muy recomendable ponerlo, sino compilará para la versión 1.3.

 * <<El segundo plugin>>, {{{http://maven.apache.org/plugins/maven-war-plugin/}maven-war-plugin}}, usado para proyectos web, se empaquetan en un war.
 Esta configuración es muy simple, se indica la carpeta de los fuentes de la aplicación web, el nombre del war, pero se pueden configurar muchas otras cosas


* {INTEGRACION CON LOS IDE:}

  En {{{http://mevenide.codehaus.org/}codehaus}} tienes los plugins para los cuatro IDEs más conocidos: eclipse, netbeans, IntelliJ y JBuilder.

  [[1]] <<ECLIPSE>>

  Los proyectos maven, se pueden importar en los IDE mas conocidos del mercado.

  Para convertir el proyecto en Eclipse se debe ejecutar el siguiente comando dentro de la carpeta del proyecto:

  <<mvn eclipse:eclipse>>

  Este Goal crea los ficheros necesarios para que Eclipse pueda importar el proyecto.

  Para importar el proyecto se puede hacer en la siguiente opciones: File -> import -> Existing projects into workspace y seleccionar la carpeta
  correspondiente a nuestro proyecto.

  Es importante verificar dentro de eclipse la variable M2_REPO que este apuntando a nuestro repositorio local de maven.

  Si esta instalado el plugin m2eclipse, no hace falta ejecutar ningún Goal de maven. Simplemente abrimos File -> import -> Existing maven projects y listo.

  Links:

  [[1]] {{{http://chuwiki.chuidiang.org/index.php?title=Integraci%C3%B3n_de_Maven_y_Eclipse#Importar_un_proyecto_maven_en_eclipse}Integración de Maven y Eclipse}}

  [[1]] <<IDEA>>

  <<mvn idea:idea>>


* LINKS

  [[1]] {{{http://www.genbetadev.com/java-j2ee/introduccion-a-maven}Introducción a Maven I}}

  [[1]] {{{http://www.genbetadev.com/java-j2ee/introduccion-a-maven-ii-project-object-model}Introducción a Maven II}}

  [[1]] {{{http://www.dosideas.com/wiki/Maven}Conceptos Generales}}
  
  [[1]] {{{http://seamframework.org/Community/SeamPersistenceCantUseTheEntityManager}Ejemplo de Pom}}  

* Creando Proyectos:

  El arquetype:create está en desuso, y en próximas versiones de maven, caerá en el olvido.
  Aunque aún funciona, es recomendable usar el nuevo goal generate:


  [[1]] mvn archetype:create -DgroupId=com -DartifactId=prueba

  [[1]] mvn archetype:generate -DgroupId=com.genbetadev.maven -DartifactId=maven-jar-sample

  La versión -SNAPSHOT es para indicar que esta versión está en construcción, que no es definitiva. Maven irá guardando todas las versiones del jar que generemos e irá
  sustituyendo -SNAPSHOT por la fecha y hora de la construcción. Esto de -SNAPSHOT también aparece en el pom.xml y podemos quitarlo cuando creamos que tenemos la versión definitiva.


* archetypeArtifactId

  Basándonos en los arquetipos, basta con ejecutar:

  $ mvn archetype:create -DgroupId=com.autentia.demoapp -DartifactId=autentiaWeb -DarchetypeArtifactId=maven-archetype-webapp

  Como antes, indicamos el groupId y el artifactId, pero esta vez también indicamos el archetypeArtifactId. En este último atributo, con el valor maven-archetype-webapp, estamos indicando que queremos usar la plantilla de aplicaciones web.

  A parte de los arquetipos que nos proporciona Maven, es interesante saber que podemos creara nuestros propios arquetipos: http://maven.apache.org/guides/mini/guide-creating-archetypes.html

* Archetypes List

  [[1]] {{{http://docs.codehaus.org/display/MAVENUSER/Archetypes+List}Archetypes List}}

















